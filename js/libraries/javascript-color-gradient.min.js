/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/javascript-color-gradient@2.5.0/src/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class GradientColor{constructor(){this.minNum=0,this.maxNum=10,this.startHex="",this.endHex=""}setColorGradient(t,e){if(!t.startsWith("#")||!e.startsWith("#"))throw new Error('Colors must be in hexadecimal format starting with "#"');this.startHex=this.validateAndExpandHex(t),this.endHex=this.validateAndExpandHex(e)}validateAndExpandHex(t){if(4===t.length)return"#"+t[1]+t[1]+t[2]+t[2]+t[3]+t[3];if(7===t.length)return t;throw new Error("Invalid color format. Please use full hex color values (e.g., #3f2caf) instead of abbreviated formats")}setMidpoint(t=0,e=10){this.minNum=t,this.maxNum=e}getColor(t){if(void 0!==t)return"#"+this.generateHex(t,this.startHex.substring(1,3),this.endHex.substring(1,3))+this.generateHex(t,this.startHex.substring(3,5),this.endHex.substring(3,5))+this.generateHex(t,this.startHex.substring(5,7),this.endHex.substring(5,7))}generateHex(t,e,r){t<this.minNum?t=this.minNum:t>this.maxNum&&(t=this.maxNum);const s=this.maxNum-this.minNum,i=parseInt(e,16),o=(parseInt(r,16)-i)/s;return Math.round(o*(t-this.minNum)+i).toString(16).padStart(2,"0")}}class Gradient{constructor(){this.maxNum=10,this.colors=[],this.colorGradients=[],this.intervals=[]}setColorGradient(...t){if(t.length<2)throw new RangeError("setColorGradient requires at least 2 colors");const e=(this.maxNum-1)/(t.length-1);this.colorGradients=[],this.intervals=[];for(let r=0;r<t.length-1;r++){const s=new GradientColor,i=e*r,o=e*(r+1);s.setColorGradient(t[r],t[r+1]),s.setMidpoint(i,o),this.colorGradients.push(s),this.intervals.push({lower:i,upper:o})}return this.colors=t,this}getColors(){const t=[],e=this.maxNum+1;for(let e=0;e<this.intervals.length;e++){const{lower:r,upper:s}=this.intervals[e],i=0===e?0:Math.ceil(r),o=e===this.intervals.length-1?Math.ceil(s):Math.floor(s);for(let r=i;r<o;r++)t.push(this.colorGradients[e].getColor(r))}return t.push(this.colors[this.colors.length-1]),t.slice(0,e)}getColor(t){if(isNaN(t))throw new TypeError("getColor requires a numeric value");if(t<=0)throw new RangeError("getColor value should be greater than 0");const e=(this.maxNum+1)/this.colorGradients.length,r=Math.min(Math.floor(t/e),this.colorGradients.length-1);return this.colorGradients[r].getColor(t)}setMidpoint(t=10){if(isNaN(t)||t<this.colors.length)throw new RangeError("setMidpoint should be a number greater than or equal to the number of colors");return this.maxNum=t,this.setColorGradient(...this.colors),this}};
//# sourceMappingURL=/sm/eb413bd7b0c2290132b353d535c8b6972de72b0ef53852ae2533cc2ca0101b7c.map
